一、在Windows上安装Git
	1>从https://git-for-windows.github.io下载（网速慢的同学请移步国内镜像），然后按默认选项安装即可。
	2>安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
	3>安装完成后，还需要最后一步设置，在命令行输入：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
	4>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
	5>你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。
	6>注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	
二、创建版本库
	版本库又名仓库，英文名repository
	创建一个版本库非常简单，
	1>选择一个合适的地方，创建一个空目录：
		$ mkdir learngit
		$ cd learngit
		$ pwd									;命令用于显示当前目录
		/Users/michael/learngit
	2>通过git init命令把这个目录变成Git可以管理的仓库：
		$ git init
		Initialized empty Git repository in /Users/michael/learngit/.git/
		
	细心的读者可以发现当前目录下多了一个.git的目录,这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
	如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
	
三、把文件添加到版本库
	1>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。
	2>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的
	3>强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。
	4>千万不要使用Windows自带的记事本编辑任何文本文件。
	5>建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：
	6>添加文件到版本库的步骤：
		1.用命令git add告诉Git，把文件添加到仓库：
			$ git add readme.txt
		2.用命令git commit告诉Git，把文件提交到仓库：
			$ git commit -m "wrote a readme file"
			[master (root-commit) cb926e7] wrote a readme file
			1 file changed, 2 insertions(+)
			create mode 100644 readme.txt
			
四、时光机穿梭
	1>git status					命令可以让我们时刻掌握仓库当前的状态
	2>git diff	文件名				顾名思义就是查看difference，能看看具体修改了什么内容。
	3>ctrl + C						回到git环境
	
五、远程仓库
	1>创建SSH Key,在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
		
		如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	2>登陆GitHub，打开“Account settings”，“SSH Keys”页面：
		然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	3>创建远程库
		登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
		在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
	4>我们根据GitHub的提示，在本地的learngit仓库下运行命令：
		$ git remote add origin git@github.com:michaelliao/learngit.git
		
		请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
		添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	5>把本地库的所有内容推送到远程库上：
		$ git push -u origin master
		Counting objects: 19, done.
		Delta compression using up to 4 threads.
		Compressing objects: 100% (19/19), done.
		Writing objects: 100% (19/19), 13.73 KiB, done.
		Total 23 (delta 6), reused 0 (delta 0)
		To git@github.com:michaelliao/learngit.git
		* [new branch]      master -> master
		Branch master set up to track remote branch master from origin.
		
		把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

		从现在起，只要本地作了提交，就可以通过命令：
			$ git push origin master
		
		SSH警告
			当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
				The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
				RSA key fingerprint is xx.xx.xx.xx.xx.
				Are you sure you want to continue connecting (yes/no)?
			
			这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
			
			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
				Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
				
			这个警告只会出现一次，后面的操作就不会有任何警告了。
			如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。